
HSI_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000158  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002f0  080002f0  000012f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012f4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000010e  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000098  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000014d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fca  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000043b  00000000  00000000  0000250e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003ea8  00000000  00000000  00002949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000067f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00006834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002d4 	.word	0x080002d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002d4 	.word	0x080002d4

080001d4 <main>:
#define GPIOA_MODE_REG_OFFSET 0x00UL
#define GPIOA_ALTERNATE_FUNCTION_REGISTER_OFFSET 0x20UL
#define GPIOA_ALTERNATE_FUNCTION_REGISTER_ADDRESS (GPIOA_BASE_ADDR + GPIOA_ALTERNATE_FUNCTION_REGISTER_OFFSET)

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *pRccCfgrReg = (uint32_t*) RCC_CFGR_REG_ADDR;
 80001da:	4b14      	ldr	r3, [pc, #80]	@ (800022c <main+0x58>)
 80001dc:	60fb      	str	r3, [r7, #12]
	*pRccCfgrReg |= (0x5 << 24);
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 62a0 	orr.w	r2, r3, #83886080	@ 0x5000000
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	601a      	str	r2, [r3, #0]

	//AHB2 Bus clock enable

	uint32_t *pRccAhbClockEnableReg = (uint32_t*) RCC_AHB_CLOCK_ENABLE_REGISTER_ADDRESS;
 80001ea:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <main+0x5c>)
 80001ec:	60bb      	str	r3, [r7, #8]
	*pRccAhbClockEnableReg |= (1 << 17); // enable for GPIOA
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	601a      	str	r2, [r3, #0]


	// Configure GPIOA // PA_6

	uint32_t *pGPIOModeReg = (uint32_t*) (GPIOA_BASE_ADDR + GPIOA_MODE_REG_OFFSET);
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fe:	607b      	str	r3, [r7, #4]
	*pGPIOModeReg |=  0xA8000000UL;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 4228 	orr.w	r2, r3, #2818572288	@ 0xa8000000
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
	*pGPIOModeReg |= (0x2 << 12);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	601a      	str	r2, [r3, #0]

	// CONFIGURE alternation function register to set the mode

	uint32_t *pGPIOAAltFunLowReg = (uint32_t*) GPIOA_ALTERNATE_FUNCTION_REGISTER_ADDRESS;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <main+0x60>)
 800021a:	603b      	str	r3, [r7, #0]
	*pGPIOAAltFunLowReg |= (0x1 << 24); // not sure what is this
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;);
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x54>
 800022c:	40021004 	.word	0x40021004
 8000230:	40021014 	.word	0x40021014
 8000234:	48000020 	.word	0x48000020

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	@ (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	@ (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	@ (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	@ (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	@ (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800026a:	f7ff ffb3 	bl	80001d4 <main>

0800026e <LoopForever>:

LoopForever:
  b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4d0d      	ldr	r5, [pc, #52]	@ (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	@ (80002c8 <__libc_init_array+0x3c>)
 8000292:	1b64      	subs	r4, r4, r5
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2600      	movs	r6, #0
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4d0b      	ldr	r5, [pc, #44]	@ (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	@ (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2600      	movs	r6, #0
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
